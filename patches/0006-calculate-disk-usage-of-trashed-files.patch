>From a3ad1d8c6ef8d17b4eeaa3b20d6b9da9ea24884a Mon Sep 17 00:00:00 2001
From: Nathaniel W. Turner <nate@houseofnate.net>
Date: Sat, 21 Mar 2009 22:03:32 -0400
Subject: [PATCH] calculate disk usage of trashed files

Calculate and report how much disk space is consumed by the entire trash
can, and how much was (or would be) freed by autotrash.

Since this will be slower, it can be turned off with --no-size-check.
The calculations are also skipped if --quiet is specified (because there
would be no point).

Signed-off-by: Nathaniel W. Turner <nate@houseofnate.net>
---
 autotrash |   41 ++++++++++++++++++++++++++++++++++++++---
 1 files changed, 38 insertions(+), 3 deletions(-)

diff --git a/autotrash b/autotrash
index 9c99189..baa6694 100755
--- a/autotrash
+++ b/autotrash
@@ -21,6 +21,7 @@ import optparse
 import ConfigParser
 import shutil
 import glob
+import os
 import os.path
 import time
 import math
@@ -67,16 +68,32 @@ def trash_info_date(fname):
     return time.strptime(parser.get(section, key), '%Y-%m-%dT%H:%M:%S')
   return None
 
+def get_consumed_size(path):
+  '''Get the amount of filesystem space actually consumed by a file or directory'''
+  size = 0
+  try:
+    if os.path.islink(path):
+      size = os.lstat(path).st_size
+    else:
+      size = os.stat(path).st_blocks * 512
+      if os.path.isdir(path):
+        for entry_name in os.listdir(path):
+          size += get_consumed_size(os.path.join(path, entry_name))
+  except OSError:
+    logging.error('Error getting size for %s', path)
+  return size
+
 def main(args):
   #Load and set configuration options
   parser = optparse.OptionParser(usage='%prog')
-  parser.set_defaults(days=30, dryrun=False, verbose=False,trash_path=os.path.join('~','.local','share','Trash'), check=False)
+  parser.set_defaults(days=30, dryrun=False, verbose=False, trash_path=os.path.join('~','.local','share','Trash'), check=False, size_check=True)
   parser.add_option('-d', '--days', dest='days', type='int', help='Delete files older then DAYS number of days. Default: %i' % parser.defaults['days'], metavar='DAYS')
   parser.add_option('-T', '--trash-path', dest='trash_path', help='Set Trash path to PATH. Default: %s' % parser.defaults['trash_path'], metavar='PATH')
   parser.add_option('-v', '--verbose', action='store_true', dest='verbose', help='Be more verbose, a must when testing something out')
   parser.add_option('-q', '--quiet', action='store_true', dest='quiet', help='Only generate output if something is wrong')
   parser.add_option('--check', action='store_true', dest='check', help='Report .trashinfo files without a real file')
   parser.add_option('--dry-run', action='store_true', dest='dryrun', help='Just list what would have been done')
+  parser.add_option('--no-size-check', action='store_false', dest='size_check', help='Do not calculated size of files (faster)')
   parser.add_option('-V', '--version', action='store_true', dest='version', help='Show version and exit')
   (options, args) = parser.parse_args()
   
@@ -94,16 +111,28 @@ def main(args):
     logging.getLogger().setLevel(VERBOSE)
   elif options.quiet:
     logging.getLogger().setLevel(logging.WARNING)
+    # in quiet mode, size info will not be output, so no point calculating it
+    options.size_check = False
 
   trash_info_path = os.path.expanduser(os.path.join(options.trash_path,'info'))
   if not os.path.exists(trash_info_path):
     logging.error('Can not find trash information directory. Make sure you have at least GNOME 2.24')
     logging.error('I was looking at: %s', trash_info_path)
     return 1
+  total_size = 0
+  deleted_size = 0
   for file_name in glob.iglob(os.path.join(trash_info_path, '*.trashinfo')):
-    if options.check:
-      if not os.path.exists(real_file_path(file_name)):
+    file_size = 0
+    real_file = real_file_path(file_name)
+    if not os.path.exists(real_file):
+      if options.check:
         logging.warning('%s has no real file associated with it.', file_name)
+    else:
+      if options.size_check:
+        if os.path.isdir(real_file):
+          logging.log(VERBOSE, 'Calculating size of directory %s (might take a long time)', real_file)
+        file_size = get_consumed_size(real_file)
+    total_size += file_size
     #print 'Loading file',file_name
     file_time = trash_info_date(file_name)
     if file_time == None:
@@ -114,10 +143,16 @@ def main(args):
     logging.log(VERBOSE, 'File %s', file_name)
     logging.log(VERBOSE, '  is %d days old, %d seconds', days_old, seconds_old)
     logging.log(VERBOSE, '  deletion date was %s', time.strftime('%c', file_time))
+    if options.size_check:
+      logging.log(VERBOSE, '  size is %d bytes', file_size)
     if days_old > options.days:
       purge(options.trash_path, file_name, options.dryrun)
+      deleted_size += file_size
       if options.dryrun:
         logging.info('  because it describes a %d days old file', days_old)
+  if options.size_check:
+    logging.info('Total size: %.2f MiB', (total_size / 2**20))
+    logging.info('Deleted size: %.2f MiB', (deleted_size / 2**20))
   return 0
 
 if __name__ == '__main__':
-- 
1.5.6.3

