>From 6b2af64960dbc44a71ee8b828d258d2fdfb511a1 Mon Sep 17 00:00:00 2001
From: Nathaniel W. Turner <nate@houseofnate.net>
Date: Mon, 23 Mar 2009 23:51:42 -0400
Subject: [PATCH] calculate disk usage of trashed files (v2)

Calculate and report how much disk space is consumed by the entire trash
can, and how much was (or would be) freed by autotrash.

Adds a new --stat option that enables this (potentially slow)
accounting.

Signed-off-by: Nathaniel W. Turner <nate@houseofnate.net>
---
 autotrash |   55 ++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 files changed, 54 insertions(+), 1 deletions(-)

diff --git a/autotrash b/autotrash
index b6de946..35beaa0 100755
--- a/autotrash
+++ b/autotrash
@@ -70,6 +70,27 @@ def trash_info_date(fname):
     return time.strptime(parser.get(section, key), '%Y-%m-%dT%H:%M:%S')
   return None
 
+def get_consumed_size(path):
+  '''Get the amount of filesystem space actually consumed by a file or directory'''
+  size = 0
+  try:
+    if os.path.islink(path):
+      size = os.lstat(path).st_size
+    else:
+      size = os.stat(path).st_blocks * 512
+      if os.path.isdir(path):
+        for entry_name in os.listdir(path):
+          size += get_consumed_size(os.path.join(path, entry_name))
+  except OSError:
+    logging.error('Error getting size for %s', path)
+  return size
+
+def fmt_bytes(bytes, fmt='%.1f'):
+  for pow, name in  (40, 'TiB'), (30, 'GiB'), (20, 'MiB'), (10, 'KiB'):
+    if bytes >= 2**pow:
+      return '%s %s' % (fmt % (1. * bytes / 2**pow,), name)
+  return '%d bytes' % bytes
+
 def main(args):
   #Load and set configuration options
   parser = optparse.OptionParser(usage='%prog')
@@ -79,6 +100,7 @@ def main(args):
       verbose = False,
       quiet = False,
       check = False,
+      stat = False,
       dryrun = False,
       )
   parser.add_option('-d', '--days', dest='days', type='int', help='Delete files older then DAYS number of days. Default: %i' % parser.defaults['days'], metavar='DAYS')
@@ -87,6 +109,7 @@ def main(args):
   parser.add_option('-q', '--quiet', action='store_true', dest='quiet', help='Only output warnings (is overruled by verbose)')
   parser.add_option('--check', action='store_true', dest='check', help='Report .trashinfo files without a real file')
   parser.add_option('--dry-run', action='store_true', dest='dryrun', help='Just list what would have been done')
+  parser.add_option('--stat', action='store_true', dest='stat', help='Calculate the number and total size of files involved')
   parser.add_option('-V', '--version', action='store_true', dest='version', help='Show version and exit')
   (options, args) = parser.parse_args()
   
@@ -98,6 +121,12 @@ def main(args):
     parser.error('Can not work with negative or zero days')
     return 1
 
+  if options.stat and options.quiet:
+    parser.error('specifying both --quiet and --stat does not make sense')
+
+  if options.verbose and options.quiet:
+    parser.error('specifying both --quiet and --verbose does not make sense')
+
   logging.basicConfig(level=logging.INFO, format='%(message)s')
   logging.addLevelName(VERBOSE, 'VERBOSE')
   if options.verbose:
@@ -110,10 +139,25 @@ def main(args):
     logging.error('Can not find trash information directory. Make sure you have at least GNOME 2.24')
     logging.error('I was looking at: %s', trash_info_path)
     return 1
+  total_size = 0
+  total_files = 0
+  deleted_size = 0
+  deleted_files = 0
   for file_name in glob.iglob(os.path.join(trash_info_path, '*.trashinfo')):
+    file_size = 0
+    real_file = real_file_name(file_name)
     if options.check:
-      if not os.path.exists(real_file_name(file_name)):
+      if not os.path.exists(real_file):
         logging.warning('%s has no real file associated with it.', file_name)
+    if options.stat:
+      # calculating file size is relatively expensive; only do it if needed
+      file_size += get_consumed_size(file_name)
+      if os.path.exists(real_file):
+        if os.path.isdir(real_file):
+          logging.log(VERBOSE, 'Calculating size of directory %s (might take a long time)', real_file)
+        file_size += get_consumed_size(real_file)
+    total_size += file_size
+    total_files += 1
     file_time = trash_info_date(file_name)
     if file_time == None:
       continue
@@ -123,10 +167,19 @@ def main(args):
     logging.log(VERBOSE, 'File %s', file_name)
     logging.log(VERBOSE, '  is %d days old, %d seconds', days_old, seconds_old)
     logging.log(VERBOSE, '  deletion date was %s', time.strftime('%c', file_time))
+    if options.stat:
+      logging.log(VERBOSE, '  consumes %s', fmt_bytes(file_size))
     if days_old > options.days:
       purge(options.trash_path, file_name, options.dryrun)
+      deleted_size += file_size
+      deleted_files += 1
       if options.dryrun:
         logging.info('  because it describes a %d days old file', days_old)
+  if options.stat:
+    logging.info('Trash statistics:')
+    logging.info('  %6d entries at start (%s)', total_files, fmt_bytes(total_size))
+    logging.info(' -%6d deleted (%s)', deleted_files, fmt_bytes(deleted_size))
+    logging.info(' =%6d remaining (%s)', (total_files - deleted_files), fmt_bytes(total_size - deleted_size))
   return 0
 
 if __name__ == '__main__':
-- 
1.5.6.3

